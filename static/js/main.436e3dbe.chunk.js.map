{"version":3,"sources":["Components/SearchForm.js","Components/Post.js","Components/NoSubErr.js","Components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","handleSubmit","e","preventDefault","props","onSearch","query","value","currentTarget","reset","className","onSubmit","this","htmlFor","type","onChange","onSearchChange","name","ref","input","placeholder","id","Component","Gif","title","url","includes","src","alt","txt","NoSubErr","PostList","posts","result","data","length","map","post","Post","selftext","key","console","log","App","preformSearch","axios","get","then","resData","setState","children","loading","subTitle","catch","err","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0SAEqBA,E,4MAGnBC,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKC,MAAMC,SAAS,EAAKC,MAAMC,OAC/BL,EAAEM,cAAcC,S,uDAGR,IAAD,OACP,OACE,0BAAMC,UAAU,cAAcC,SAAUC,KAAKX,cAC3C,2BAAOS,UAAU,YAAYG,QAAQ,UAArC,UACA,2BAAOC,KAAK,SACLC,SAAUH,KAAKI,eACfC,KAAK,SACLC,IAAM,SAAAC,GAAK,OAAI,EAAKb,MAAQa,GAC5BC,YAAY,cACnB,4BAAQN,KAAK,SAASO,GAAG,SAASX,UAAU,iBAAgB,uBAAGA,UAAU,6BAAb,gB,GAlB5BY,aCYzBC,EAZH,SAAAnB,GAAK,OACf,wBAAIM,UAAU,YACZ,6BACA,4BAAKN,EAAMoB,OAEJpB,EAAMqB,IAAIC,SAAS,sBAClB,yBAAKC,IAAKvB,EAAMqB,IAAKG,IAAI,KACzB,2BAAIxB,EAAMyB,OCAPC,EAPE,kBACf,wBAAIpB,UAAU,WACZ,uBAAGA,UAAU,2BAAb,+BACA,mECmBWqB,EApBE,SAAA3B,GACb,IACI4B,EADEC,EAAS7B,EAAM8B,KAYrB,OATID,EAAOE,OAAS,EACpBH,EAAQC,EAAOG,KAAI,SAAAC,GAAI,OACnB,kBAACC,EAAD,CAAMb,IAAKY,EAAKH,KAAKT,IAAKD,MAAOa,EAAKH,KAAKV,MAAOK,IAAKQ,EAAKH,KAAKK,SAAUC,IAAKH,EAAKH,KAAKb,SAG9FoB,QAAQC,IAAIT,GACZD,EAAQ,kBAAC,EAAD,OAIR,wBAAItB,UAAU,YACTsB,ICbYW,E,kDAEnB,aAAe,IAAD,8BACZ,gBAYFC,cAAgB,WAAsB,IAArBtC,EAAoB,uDAAZ,QACvBuC,IAAMC,IAAN,mCAAsCxC,EAAtC,UACCyC,MAAM,SAAAC,GACL,EAAKC,SAAS,CAACjB,MAAOgB,EAAQd,KAAKA,KAAKgB,SAAUC,SAAS,EAAOC,SAAU9C,OAE7E+C,OAAM,SAAAC,GACLb,QAAQC,IAAI,kCAAmCY,OAjBjD,EAAKC,MAAQ,CACXvB,MAAO,GACPmB,SAAS,EACTC,SAAU,IALA,E,gEAUZxC,KAAKgC,kB,+BAcL,OACE,6BACE,yBAAKlC,UAAU,eACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,cAAcE,KAAK2C,MAAMH,SAAvC,WACA,kBAAC,EAAD,CAAY/C,SAAUO,KAAKgC,kBAG/B,yBAAKlC,UAAU,gBAEZE,KAAK2C,MAAMJ,QACV,6CACA,kBAAC,EAAD,CAAUjB,KAAMtB,KAAK2C,MAAMvB,c,GAtCNV,aCMbkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.436e3dbe.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class SearchForm extends Component {\n  \n  \n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSearch(this.query.value);\n    e.currentTarget.reset();\n  }\n  \n  render() {  \n    return (\n      <form className=\"search-form\" onSubmit={this.handleSubmit} >\n        <label className=\"is-hidden\" htmlFor=\"search\">Search</label>\n        <input type=\"search\" \n               onChange={this.onSearchChange}\n               name=\"search\" \n               ref={ input => this.query = input}\n               placeholder=\"Search...\" />\n        <button type=\"submit\" id=\"submit\" className=\"search-button\"><i className=\"material-icons icn-search\">search</i></button>\n      </form>      \n    );\n  }\n}","import React from 'react';\n\nconst Gif = props => (\n  <li className=\"gif-wrap\">\n    <br></br>\n    <h2>{props.title}</h2>\n    {\n          (props.url.includes(\"https://i.redd.it/\"))\n          ? <img src={props.url} alt=\"\"/>\n          : <p>{props.txt}</p>\n        }\n  </li>\n);\n\nexport default Gif;","import React from 'react';\n\nconst NoSubErr = () => (\n  <li className='no-gifs'>\n    <i className=\"material-icons icon-gif\">sentiment_very_dissatisfied</i>\n    <h3>Sorry, no subs match your search.</h3>\n  </li>\n);\n\nexport default NoSubErr;","import React from 'react';\nimport Post from './Post';\nimport NoSubErr from \"./NoSubErr\";\n\nconst PostList = props => {\n    const result = props.data;\n    let posts;\n\n    if (result.length > 0) {\n    posts = result.map(post => \n        <Post url={post.data.url} title={post.data.title} txt={post.data.selftext} key={post.data.id}/>\n    );\n    } else {\n    console.log(result);\n    posts = <NoSubErr />\n    }\n\n    return(\n    <ul className=\"gif-list\">\n        {posts}\n    </ul> \n    );\n}\n\nexport default PostList;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport SearchForm from './Components/SearchForm';\nimport PostList from './Components/PostList';\n\nexport default class App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      posts: [],\n      loading: true,\n      subTitle: \"\",\n    }\n  } \n\n  componentDidMount() {\n    this.preformSearch();\n  }\n\n  preformSearch = (query = \"Memes\") => {\n    axios.get(`https://www.reddit.com/r/${query}.json`)\n    .then( resData => {\n      this.setState({posts: resData.data.data.children, loading: false, subTitle: query});\n    })\n    .catch(err => {\n      console.log(\"Error fetching and parsing data\", err);\n    });\n  }\n\n  render() { \n    return (\n      <div>\n        <div className=\"main-header\">\n          <div className=\"inner\">\n            <h1 className=\"main-title\">{this.state.subTitle} Search</h1>\n            <SearchForm onSearch={this.preformSearch} />      \n          </div>   \n        </div>    \n        <div className=\"main-content\">\n        {\n          (this.state.loading)\n          ? <p>Hold on man...</p>\n          : <PostList data={this.state.posts}/>\n        }\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}